from Crypto.Util.number import *
from Crypto.PublicKey import RSA
import gmpy2

from gmpy2 import *


f = open("publickey.pem", "r")

key = RSA.importKey(f.read())

n = key.n
e = key.e

c = bytes_to_long(("3135b04822f3eaadb3cef509f214f42c9e9e5c18a68565dc435e5f67e626398fb7d49bd31ca10d738c4ccd78610d1b2f522becf312483bd2a1ab7bdbf73338e847c751021bada55fa4a071dbb726d1f127dd439577251862a25dac562ba110be9350fb461dffc772c8cc6cbe8aff79d860882ebd4f768e6442e2f1f9f4bb83f9").decode("hex"))


r = (4) + (4*1*n)
y = gmpy2.iroot(r,2)[0]

x = ((-2 + y)/2)

if(n % x == 0):
	q = n/x
	

phin = (x-1)*(q-1)
d = gmpy2.invert(e, phin)
m = pow(c, d, n)
print(long_to_bytes(m))
		
		
